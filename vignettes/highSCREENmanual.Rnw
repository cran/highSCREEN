% \VignetteIndexEntry{highSCREEN manual}
% \VignetteDepends{highSCREEN}
% \VignetteKeywords{High Throughput Screening}
% \VignettePackage{highSCREEN}
% \VignetteEngine{knitr::knitr}


\documentclass[11pt, a4paper]{article}
 \setlength{\topmargin}{-0.2in}
 \setlength{\oddsidemargin}{0.05 in}
 \setlength{\textwidth}{6in}
 \setlength{\textheight}{9in}
 \headsep=0in
 \oddsidemargin=0in \evensidemargin=0in


\title{\texttt{highSCREEN}: High Throughput Screening for Plate Based Assays}

\author{Ivo D. Shterev \thanks{i.shterev@duke.edu} \and Cliburn Chan \and Gregory D. Sempowski}


\begin{document}

\maketitle 

\section{Introduction}
This vignette describes the use of the R extension package \texttt{highSCREEN} for high throughput screening of small molecule compounds with activities measured on multi-well plates. The plate-based assay raw results can be any continuous value - for example, optical density (OD; in nanometers). Package functionalities include small molecule compound library screening data extraction and normalization, plate quality control (QC), identifying compounds that are hits according to defined criteria and visualization of compounds and controls. The framework supports \texttt{96-well} and \texttt{384-well} plate formats\footnote{See section \ref{sec:format} for additional details on supported plate layouts.}. The package is also capable of handling any number of replicates of the data. Currently, \texttt{highSCREEN} implements three different within plate quality control (QC) procedures which determine plate pass or fail. The package implements three different normalization methods, namely the \texttt{b-score}, the \texttt{c-score} (also known as percent degranulation) and the \texttt{z-score} normalization methods \cite{malo}. The user can also plot the density and histogram of controls which can be helpful in tuning the QC procedures.

\section{Data Format}\label{sec:format}
\subsection{Plate Layout}
The following plate formats are supported
\begin{itemize}
\item 96-well plate. This format represents an \texttt{8}$\times$\texttt{12} matrix in which the first and last columns represent control wells and columns two to ten represent compound wells.
\item 384-well plate. This format represents an \texttt{16}$\times$\texttt{24} matrix. The first and last two columns represent control wells and columns three to twenty two represent compound wells.
\item 384-well plate composed of four 96-well plates. This format represents an \texttt{16}$\times$\texttt{24} matrix. The first and last two columns represent control wells and columns three to twenty two represent compound wells. From this 384-well plate, four 96-well plates can be constructed as shown in Fig. \ref{384wellplate}.
\end{itemize}

\begin{figure}[h]
\centering
\includegraphics[scale=0.75]{384wellplate.pdf}
\caption{384-well plate consisting of four 96-well plates.}
\label{384wellplate}
\end{figure}
 
\subsection{Distribution of Controls}
As mentioned in the previous subsection, it is assumed that the control wells are located either in the first and last plate columns (96-well plate), or in the first and last two plate columns (348-well plate) as shown in Fig. \ref{384wellplate}. The R package \texttt{highSCREEN} assumes that the plate contains positive and negative control wells. The package can also handle additional control types as specified by the user. The requirement is that in addition to the 384-well plate data the user also provides a control map. The map specifies the control type and its position in the control columns, and is used as a map to identify the controls in the plate layout. There are two types of control maps, 96-well and 384-well plate control maps. The first column of the 384-well plate control map specifies the controls and their position in the first column of the 384-well plate. Similarly, the second, third and fourth control map columns correspond to the second, twenty third and twenty fourth 384-well plate columns, respectively. Similarly, the first and second columns of the 96-well plate control map specify the controls and their position in the first and second columns of the 96-well plate, respectively. In the example below, a 384-well plate contains five different types of controls, positive controls ("Control P"), negative controls ("Control N"), controls with low concentration ("Control low"), controls with medium concentration ("Control med"), and controls with high concentration ("Control high").

\tiny
<<echo=TRUE>>=
set.seed(1234)
library(highSCREEN)
nc = 24
nr = 16
# create a 384-well plate with compounds and controls
replicate = matrix(abs(rnorm(nr*nc)), nr, nc)
head(replicate)

# create 384-well plate control map
cmap = data.frame(X1=c(rep("Control P", floor(nr/3)), rep(c("Control low", "Control med", "Control high"), 
(floor(nr/3)+nr-3*floor(nr/3))/3), rep("Control N", floor(nr/3))), X2=c(rep("Control P", floor(nr/3)), 
rep(c("Control low", "Control med", "Control high"), (floor(nr/3)+nr-3*floor(nr/3))/3), rep("Control N", 
floor(nr/3))), X3=c(rep("Control N", floor(nr/3)), rep(c("Control low", "Control med", "Control high"), 
(floor(nr/3)+nr-3*floor(nr/3))/3), rep("Control P", floor(nr/3))), X4=c(rep("Control N", floor(nr/3)), 
rep(c("Control low", "Control med", "Control high"), (floor(nr/3)+nr-3*floor(nr/3))/3), rep("Control P", 
floor(nr/3))))
cmap

# create 96-well plate control map
cmap = data.frame(X1=c(rep("Control P", floor(nr/3)), rep(c("Control low", "Control med", "Control high"), 
(floor(nr/3)+nr-3*floor(nr/3))/3), rep("Control N", floor(nr/3))), X2=c(rep("Control N", floor(nr/3)), 
rep(c("Control low", "Control med", "Control high"), (floor(nr/3)+nr-3*floor(nr/3))/3), rep("Control P", 
floor(nr/3))))
cmap = cmap[seq(1,nr,2),]
cmap
@
\normalsize

\subsection{Distribution of Compounds}
Biologically speaking, some normalization methods implemented in \texttt{highSCREEN} assume that the compounds are distributed randomly in the plate. If there are different concentrations of the same compounds in the plate, some of the implemented normalization methods may not be biologically valid\footnote{See Section \ref{sec:norm} for more details regarding within plate normalization methods and their applicability.}.

\section{Assay and Activity Measurement}
The package can handle single readings as well as multiple readings/replicates of 384-well plates.
In the following example it is assumed that the OD data are collected at two different time instances thus forming "before" and "after" data sets. Each data set consists of replicates. The user can specify which plate and replicate to extract from the input data sets. When extracting a specific plate and replicate, the output data are organized in the form of a list consisting of two elements. Elements \texttt{datbefore} and \texttt{datafter} contain the plates (compounds and controls) of "before" and "after" data sets respectively. 

\tiny
<<echo=TRUE>>=
set.seed(1234)
library(highSCREEN)
nc = 24
nr = 16

# create 1st replicate of data matrix with compounds and controls
replicate1 = matrix(abs(rnorm(nr*nc)), nr, nc)

# create 2nd replicate of data matrix with compounds and controls
replicate2 = matrix(abs(rnorm(nr*nc)), nr, nc)

# create 3rd replicate of data matrix with compounds and controls
replicate3 = matrix(abs(rnorm(nr*nc)), nr, nc)

# combine all replicate to create "before" data set
replicates_before = list(replicate1, replicate2, replicate3)
names(replicates_before) = c("Replicate1", "Replicate2", "Replicate3")

# create 1st replicate of data matrix with compounds and controls
replicate1 = matrix(abs(rnorm(nr*nc)), nr, nc)

# create 2nd replicate of data matrix with compounds and controls
replicate2 = matrix(abs(rnorm(nr*nc)), nr, nc)

# create 3rd replicate of data matrix with compounds and controls
replicate3 = matrix(abs(rnorm(nr*nc)), nr, nc)

# combine all replicate to create "after" data set
replicates_after = list(replicate1, replicate2, replicate3)
names(replicates_after) = c("Replicate1", "Replicate2", "Replicate3")

# extract plate 3, replicate 2
extractplate(replicates_before, replicates_after, plate=3, replicate=2)
@
\normalsize

\section{Within Plate Normalization}\label{sec:norm}
The user can normalize individual 96-well plates and replicates via the package function \texttt{normplate()}, which utilizes one of the implemented normalization methods. Currently, \texttt{highSCREEN} implements the \texttt{b-score}, the \texttt{c-score} and \texttt{z-score} normalization methods. It is worth emphasizing that the \texttt{b-score} and \texttt{z-score} normalization methods are biologically plausible if compounds are randomly distributed within a plate. If there are different concentrations of the same compounds, the \texttt{c-score} normalization method is more appropriate.

The input data for normalization can be taken from the output of the package function \texttt{extractplate()}. However, the user must provide a 96-well plate control map. The format of the control map and the normalized data are shown in the following example. 

\tiny
<<echo=TRUE>>=
set.seed(1234)
library(highSCREEN)
nc = 24
nr = 16

# create control map
cmap = data.frame(X1=c(rep("Control P", floor(nr/3)), rep(c("Control low", "Control med", "Control high"), 
(floor(nr/3)+nr-3*floor(nr/3))/3), rep("Control N", floor(nr/3))), X2=c(rep("Control N", floor(nr/3)), 
rep(c("Control low", "Control med", "Control high"), (floor(nr/3)+nr-3*floor(nr/3))/3), rep("Control P", floor(nr/3))))
cmap = cmap[seq(1,nr,2),]
cmap

# create 1st replicate of data matrix with compounds and controls
replicate1 = matrix(abs(rnorm(nr*nc)), nr, nc)

# create 2nd replicate of data matrix with compounds and controls
replicate2 = matrix(abs(rnorm(nr*nc)), nr, nc)

# create 3rd replicate of data matrix with compounds and controls
replicate3 = matrix(abs(rnorm(nr*nc)), nr, nc)

# combine all replicate for the before data
replicates_before = list(replicate1, replicate2, replicate3)
names(replicates_before) = c("Replicate1", "Replicate2", "Replicate3")

# create 1st replicate of data matrix with compounds and controls
replicate1 = matrix(abs(rnorm(nr*nc)), nr, nc)

# create 2nd replicate of data matrix with compounds and controls
replicate2 = matrix(abs(rnorm(nr*nc)), nr, nc)

# create 3rd replicate of data matrix with compounds and controls
replicate3 = matrix(abs(rnorm(nr*nc)), nr, nc)

# combine all replicate for the after data
replicates_after = list(replicate1, replicate2, replicate3)
names(replicates_after) = c("Replicate1", "Replicate2", "Replicate3")

# extract plate 1, replicate 1
dat = extractplate(replicates_before, replicates_after, plate=1, replicate=1)

# normalize using c-score
head(normplate("Main Plate 1", dat[["datbefore"]], dat[["datafter"]], cmap, plate=1, triplicate=1, norm="cscore",
 poscont="Control P", negcont="Control N"))

# normalize using b-score (medpolish)
head(normplate("Main Plate 1", dat[["datbefore"]], dat[["datafter"]], cmap, plate=1, triplicate=1, norm="bscore"))

# normalize using z-score
head(normplate("Main Plate 1", dat[["datbefore"]], dat[["datafter"]], cmap, plate=1, triplicate=1, norm="zscore"))
@
\normalsize

\section{Cross-Plate Normalization}
Currently not implemented.

\section{Reformatting Normalized Data of Replicates}
The package allows for reformatting the normalized data for easier interpretation via the function \texttt{formatRESULT()}. In the following example the normalized data of replicates are combined and reformatted for easier visualization.

\tiny
<<echo=TRUE>>=
set.seed(1234)
library(highSCREEN)
nc = 24
nr = 16

# create 1st triplicate of data matrix with compounds and controls
replicate1 = matrix(abs(rnorm(nr*nc)), nr, nc)

# create control map
cmap = data.frame(X1=c(rep("Control P", floor(nr/3)), rep(c("Control low", "Control med", "Control high"), 
(floor(nr/3)+nr-3*floor(nr/3))/3), rep("Control N", floor(nr/3))), X2=c(rep("Control N", floor(nr/3)), 
rep(c("Control low", "Control med", "Control high"), (floor(nr/3)+nr-3*floor(nr/3))/3), rep("Control P", floor(nr/3))))
cmap = cmap[seq(1,nr,2),]

# create 2nd triplicate of data matrix with compounds and controls
replicate2 = matrix(abs(rnorm(nr*nc)), nr, nc)

# create 3rd triplicate of data matrix with compounds and controls
replicate3 = matrix(abs(rnorm(nr*nc)), nr, nc)

# combine all triplicates for the before data
replicates_before = list(replicate1, replicate2, replicate3)
names(replicates_before) = c("Replicate1", "Replicate2", "Replicate3")

# create 1st triplicate of data matrix with compounds and controls
replicate1 = matrix(abs(rnorm(nr*nc)), nr, nc)

# create 2nd triplicate of data matrix with compounds and controls
replicate2 = matrix(abs(rnorm(nr*nc)), nr, nc)

# create 3rd triplicate of data matrix with compounds and controls
replicate3 = matrix(abs(rnorm(nr*nc)), nr, nc)

# combine all triplicates for the after data
replicates_after = list(replicate1, replicate2, replicate3)
names(replicates_after) = c("Replicate1", "Replicate2", "Replicate3")

# extract plate 1, all triplicates
dat1 = extractplate(replicates_before, replicates_after, plate=1, replicate=1)
dat2 = extractplate(replicates_before, replicates_after, plate=1, replicate=2)
dat3 = extractplate(replicates_before, replicates_after, plate=1, replicate=3)

# normalize data of all triplicates
res1 = normplate("Main Plate 1", dat1[["datbefore"]], dat1[["datafter"]], cmap, plate=1, triplicate=1, norm="zscore") 
res2 = normplate("Main Plate 1", dat2[["datbefore"]], dat2[["datafter"]], cmap, plate=1, triplicate=2, norm="zscore")
res3 = normplate("Main Plate 1", dat3[["datbefore"]], dat3[["datafter"]], cmap, plate=1, triplicate=3, norm="zscore")

# reformat data of all triplicates
head(formatRESULT(rbind(res1, res2, res3), triplicate="Triplicate", score="score", t="Time"))
@
\normalsize


\section{QC}
The package implements several QC procedures to determine if a plate is eligible for further analyses. Currently, all implemented quality checks are within plate QC procedures. Across plates QC procedures are currently not supported.

The package implements three QC procedures via the function \texttt{qcplate()}. The first QC procedure (QC1) checks if all control replicates from "before" data set are above a pre-defined threshold value. If any control replicate falls below that threshold, it is determined that the plate fails QC1. The second QC procedure (QC2) computes the mean of all positive controls for a given replicate. The plate passes QC2 iff all of the three means are below a pre-defined threshold value. The third QC procedure (QC3) assumes that there are in total five different types of controls, negative controls (hypothetically denoted as "Control N"), positive controls ("Control P") and an additional control that is represented in three different concentrations ("Control low", "Control med" and "Control high"). The QC3 procedure computes the means of all "after" replicates specific to a given control and concentration, and compares them. In order for the plate to pass QC3, the following must be satisfied\footnote{The controls (except positive and negative) need to be specified as an input to \texttt{qcplate()} in the same order as they appear in the QC3 condition (\ref{eq:qc3}).}:

\scriptsize
\begin{equation}
\mbox{mean(Control N)}<\mbox{mean(Control low)}<\mbox{mean(Control med)}<\mbox{mean(Control high)}<\mbox{mean(Control P)}.
\label{eq:qc3}
\end{equation}
\normalsize

A plate passes the overall QC iff it passes all individual QC procedures. This provides a conservative QC control. The code below demonstrates the use of the package QC capability on a single 96-well plate.

\tiny
<<echo=TRUE>>=
set.seed(1234)
library(highSCREEN)
nc = 24
nr = 16

# create 1st triplicate of data matrix with compounds and controls
replicate1 = matrix(abs(rnorm(nr*nc)), nr, nc)

# create control map
cmap = data.frame(X1=c(rep("Control P", floor(nr/3)), rep(c("Control low", "Control med", "Control high"), 
(floor(nr/3)+nr-3*floor(nr/3))/3), rep("Control N", floor(nr/3))), X2=c(rep("Control N", floor(nr/3)), 
rep(c("Control low", "Control med", "Control high"), (floor(nr/3)+nr-3*floor(nr/3))/3), rep("Control P", floor(nr/3))))
cmap = cmap[seq(1,nr,2),]

# create 2nd triplicate of data matrix with compounds and controls
replicate2 = matrix(abs(rnorm(nr*nc)), nr, nc)

# create 3rd triplicate of data matrix with compounds and controls
replicate3 = matrix(abs(rnorm(nr*nc)), nr, nc)

# combine all triplicates for the before data
replicates_before = list(replicate1, replicate2, replicate3)

# create 1st triplicate of data matrix with compounds and controls
replicate1 = matrix(abs(rnorm(nr*nc)), nr, nc)

# create 2nd triplicate of data matrix with compounds and controls
replicate2 = matrix(abs(rnorm(nr*nc)), nr, nc)

# create 3rd triplicate of data matrix with compounds and controls
replicate3 = matrix(abs(rnorm(nr*nc)), nr, nc)

# combine all triplicates for the after data
replicates_after = list(replicate1, replicate2, replicate3)
names(replicates_after) = c("Replicate1", "Replicate2", "Replicate3")

# extract plate 1, replicate 1
dat11 = extractplate(replicates_before, replicates_after, plate=1, replicate=1)

# extract plate 1, triplicate 2
dat12 = extractplate(replicates_before, replicates_after, plate=1, replicate=2)

# extract plate 1, triplicate 3
dat13 = extractplate(replicates_before, replicates_after, plate=1, replicate=3)

# no normalizion (norm="raw")
res11 = normplate("Main Plate 1", dat11[["datbefore"]], dat11[["datafter"]], cmap, plate=1, triplicate=1, norm="raw")
res12 = normplate("Main Plate 1", dat12[["datbefore"]], dat12[["datafter"]], cmap, plate=1, triplicate=2, norm="raw")
res13 = normplate("Main Pltae 1", dat13[["datbefore"]], dat13[["datafter"]], cmap, plate=1, triplicate=3, norm="raw")

# combine 3 replicates
res1 = rbind(res11, res12, res13)

# reformat result
res1 = formatRESULT(res1, triplicate="Triplicate", score="score", t="Time")

# perform QC
qcplate(res1, poscont="Control P", negcont="Control N", qc1.val=0.225, qc2.val=2, 
addcont=c("Control low", "Control med", "Control high"), welltype="welltype")
@
\normalsize

\section{Plate Statistical Effect Size}
The package provides additional plate-based assessment, by computing \texttt{z-factor} and strictly standardized mean difference (\texttt{ssmd}) of a 96-well plate. The following example computes \texttt{z-factor} and \texttt{ssmd} of a 96-well plate replicate via the package function \texttt{zfactor.ssmd()}.

\tiny
<<echo=TRUE>>=
set.seed(1234)
library(highSCREEN)

nc = 24
nr = 16

# create 1st triplicate of data matrix with compounds and controls
replicate1 = matrix(abs(rnorm(nr*nc)), nr, nc)

# create control map
cmap = data.frame(X1=c(rep("Control P", floor(nr/3)), rep(c("Control low", "Control med", "Control high"), 
(floor(nr/3)+nr-3*floor(nr/3))/3), rep("Control N", floor(nr/3))), X2=c(rep("Control N", floor(nr/3)), 
rep(c("Control low", "Control med", "Control high"), (floor(nr/3)+nr-3*floor(nr/3))/3), rep("Control P", floor(nr/3))))
cmap = cmap[seq(1,nr,2),]


# create 2nd triplicate of data matrix with compounds and controls
replicate2 = matrix(abs(rnorm(nr*nc)), nr, nc)

# create 3rd triplicate of data matrix with compounds and controls
replicate3 = matrix(abs(rnorm(nr*nc)), nr, nc)

# combine all triplicates for the before data
replicates_before = list(replicate1, replicate2, replicate3)
names(replicates_before) = c("Replicate1", "Replicate2", "Replicate3")

# create 1st triplicate of data matrix with compounds and controls
replicate1 = matrix(abs(rnorm(nr*nc)), nr, nc)

# create 2nd triplicate of data matrix with compounds and controls
replicate2 = matrix(abs(rnorm(nr*nc)), nr, nc)

# create 3rd triplicate of data matrix with compounds and controls
replicate3 = matrix(abs(rnorm(nr*nc)), nr, nc)

# combine all triplicates for the after data
replicates_after = list(replicate1, replicate2, replicate3)
names(replicates_after) = c("Replicate1", "Replicate2", "Replicate3")

# extract plate 1, triplicate 1
dat1 = extractplate(replicates_before, replicates_after, plate=1, replicate=1)
# extract plate 1, triplicate 2
dat2 = extractplate(replicates_before, replicates_after, plate=1, replicate=2)
# extract plate 1, triplicate 3
dat3 = extractplate(replicates_before, replicates_after, plate=1, replicate=3)

# no normalizion
datraw1 = normplate("Main Plate 1", dat1[["datbefore"]], dat1[["datafter"]], cmap, plate=1, triplicate=1, norm="raw")
datraw2 = normplate("Main Plate 1", dat2[["datbefore"]], dat2[["datafter"]], cmap, plate=1, triplicate=2, norm="raw")
datraw3 = normplate("Main Pltae 1", dat3[["datbefore"]], dat3[["datafter"]], cmap, plate=1, triplicate=3, norm="raw")

# combine 3 triplicates
datraw = rbind(datraw1, datraw2, datraw3)

# reformat result
datraw = formatRESULT(datraw, triplicate="Triplicate", score="score", t="Time")

# compute z-factor and ssmd for each raw compound, triplicate 1
zfactor.ssmd(datraw, "Control P", "Control N", "Main Plate 1", 1)
@
\normalsize

\section{Identifying Hits}
The user can identify hits via the package function \texttt{hits()}, based on specific threshold values. After identifying candidate hits, the user can rank the hits via the package function \texttt{rankhits()}, using different selection rules.
\subsection{Criteria}
Currently, the package implements three criteria for identifying hits. Firstly, the compounds identified as hits should pass QC1 based on the mean of "before" raw replicates. Secondly, the mean of "before" normalized replicates should be smaller than the mean of "after" normalized replicates. Thirdly, the mean of "after" normalized replicates should be larger than a pre-defined threshold value. The output of \texttt{hits()} contains columns \texttt{IND2} and \texttt{IND3}, which specify which compound passes (TRUE) or fails (FALSE) the second and third criteria respectively. Only compounds that pass QC1 and belong to plates that passed overall QC are included in the output of \texttt{hits()}.

\tiny
<<echo=TRUE>>=
set.seed(1234)
library(highSCREEN)

nc = 24
nr = 16

# create 1st triplicate of data matrix with compounds and controls
replicate1 = matrix(abs(rnorm(nr*nc)*0.01), nr, nc)

# create control map
cmap = data.frame(X1=c(rep("Control P", floor(nr/3)), rep(c("Control low", "Control med", "Control high"), 
(floor(nr/3)+nr-3*floor(nr/3))/3), rep("Control N", floor(nr/3))), X2=c(rep("Control N", floor(nr/3)), 
rep(c("Control low", "Control med", "Control high"), (floor(nr/3)+nr-3*floor(nr/3))/3), rep("Control P", floor(nr/3))))
cmap = cmap[seq(1,nr,2),]

# create 2nd triplicate of data matrix with compounds and controls
replicate2 = matrix(abs(rnorm(nr*nc)*0.01), nr, nc)

# create 3rd triplicate of data matrix with compounds and controls
replicate3 = matrix(abs(rnorm(nr*nc)*0.01), nr, nc)

# combine all triplicates for the before data
replicates_before = list(replicate1, replicate2, replicate3)
names(replicates_before) = c("Replicate1", "Replicate2", "Replicate3")

# create 1st triplicate of data matrix with compounds and controls
replicate1 = matrix(abs(rnorm(nr*nc)), nr, nc)

# create 2nd triplicate of data matrix with compounds and controls
replicate2 = matrix(abs(rnorm(nr*nc)), nr, nc)

# create 3rd triplicate of data matrix with compounds and controls
replicate3 = matrix(abs(rnorm(nr*nc)), nr, nc)

# combine all triplicates for the after data
replicates_after = list(replicate1, replicate2, replicate3)
names(replicates_after) = c("Replicate1", "Replicate2", "Replicate3")

# extract plate 1, triplicate 1
dat1 = extractplate(replicates_before, replicates_after, plate=1, replicate=1)

# extract plate 1, triplicate 2
dat2 = extractplate(replicates_before, replicates_after, plate=1, replicate=2)

# extract plate 1, triplicate 3
dat3 = extractplate(replicates_before, replicates_after, plate=1, replicate=3)

# no normalizion
datraw1 = normplate("Main Plate 1", dat1[["datbefore"]], dat1[["datafter"]], cmap, plate=1, triplicate=1, norm="raw")
datraw2 = normplate("Main Plate 1", dat2[["datbefore"]], dat2[["datafter"]], cmap, plate=1, triplicate=2, norm="raw")
datraw3 = normplate("Main Pltae 1", dat3[["datbefore"]], dat3[["datafter"]], cmap, plate=1, triplicate=3, norm="raw")

# combine 3 triplicates
datraw = rbind(datraw1, datraw2, datraw3)

# reformat result
datraw = formatRESULT(datraw, triplicate="Triplicate", score="score", t="Time")

# c-score normalization
datnorm1 = normplate("Main Plate 1", dat1[["datbefore"]], dat1[["datafter"]], cmap, plate=1, triplicate=1, norm="cscore", 
poscont="Control P", negcont="Control N")
datnorm2 = normplate("Main Plate 1", dat2[["datbefore"]], dat2[["datafter"]], cmap, plate=1, triplicate=2, norm="cscore", 
poscont="Control P", negcont="Control N")
datnorm3 = normplate("Main Pltae 1", dat3[["datbefore"]], dat3[["datafter"]], cmap, plate=1, triplicate=3, norm="cscore",
poscont="Control P", negcont="Control N")

# combine 3 triplicates
datnorm = rbind(datnorm1, datnorm2, datnorm3)

# reformat result
datnorm = formatRESULT(datnorm, triplicate="Triplicate", score="score", t="Time")

# identify hits
head(hits(datraw, datnorm, qc.mainplates="Main Plate 1", qc1.val=0.225, hit.val=3))
@
\normalsize

\subsection{Selection Rules}
After identifying candidate hits, the next step is to rank them according to certain criteria/rules. The package incorporates several criteria for ranking candidate hits. One of the criteria is based on the mean of the replicates. The candidate hits are sorted according to decreasing value of the mean. Additionally, the package computes for each candidate hit, the standard deviation (SD) based on the replicates, the coefficient of variation (CV) as the ratio of the mean and standard deviation, and other parameters such as whether a compound CV is within $1.5*\mbox{IQR}$, where IQR is the inter-quartile range computed from all candidate hit CVs. These additional parameters can be helpful to the user in developing their own customized hit selection rules. An example of ranking candidate hits based on the mean of replicate scores is shown below.

\tiny
<<echo=TRUE>>=
set.seed(1234)
library(highSCREEN)

nc = 24
nr = 16

# create 1st triplicate of data matrix with compounds and controls
replicate1 = matrix(abs(rnorm(nr*nc)*0.01), nr, nc)

# create control map
cmap = data.frame(X1=c(rep("Control P", floor(nr/3)), rep(c("Control low", "Control med", "Control high"), 
(floor(nr/3)+nr-3*floor(nr/3))/3), rep("Control N", floor(nr/3))), X2=c(rep("Control N", floor(nr/3)), 
rep(c("Control low", "Control med", "Control high"), (floor(nr/3)+nr-3*floor(nr/3))/3), rep("Control P", floor(nr/3))))
cmap = cmap[seq(1,nr,2),]

# create 2nd triplicate of data matrix with compounds and controls
replicate2 = matrix(abs(rnorm(nr*nc)*0.01), nr, nc)

# create 3rd triplicate of data matrix with compounds and controls
replicate3 = matrix(abs(rnorm(nr*nc)*0.01), nr, nc)

# combine all triplicates for the before data
replicates_before = list(replicate1, replicate2, replicate3)
names(replicates_before) = c("Replicate1", "Replicate2", "Replicate3")

# create 1st triplicate of data matrix with compounds and controls
replicate1 = matrix(abs(rnorm(nr*nc)), nr, nc)

# create 2nd triplicate of data matrix with compounds and controls
replicate2 = matrix(abs(rnorm(nr*nc)), nr, nc)

# create 3rd triplicate of data matrix with compounds and controls
replicate3 = matrix(abs(rnorm(nr*nc)), nr, nc)

# combine all triplicates for the after data
replicates_after = list(replicate1, replicate2, replicate3)
names(replicates_after) = c("Replicate1", "Replicate2", "Replicate3")

# extract plate 1, replicate 1
dat1 = extractplate(replicates_before, replicates_after, plate=1, replicate=1)
# extract plate 1, replicate 2
dat2 = extractplate(replicates_before, replicates_after, plate=1, replicate=2)
# extract plate 1, replicate 3
dat3 = extractplate(replicates_before, replicates_after, plate=1, replicate=3)

# no normalizion
datraw1 = normplate("Main Plate 1", dat1[["datbefore"]], dat1[["datafter"]], cmap, plate=1, triplicate=1, norm="raw")
datraw2 = normplate("Main Plate 1", dat2[["datbefore"]], dat2[["datafter"]], cmap, plate=1, triplicate=2, norm="raw")
datraw3 = normplate("Main Pltae 1", dat3[["datbefore"]], dat3[["datafter"]], cmap, plate=1, triplicate=3, norm="raw")

# combine 3 triplicates
datraw = rbind(datraw1, datraw2, datraw3)

# reformat result
datraw = formatRESULT(datraw, triplicate="Triplicate", score="score", t="Time")

# c-score normalization
datnorm1 = normplate("Main Plate 1", dat1[["datbefore"]], dat1[["datafter"]], cmap, plate=1, triplicate=1, norm="cscore", 
poscont="Control P", negcont="Control N")
datnorm2 = normplate("Main Plate 1", dat2[["datbefore"]], dat2[["datafter"]], cmap, plate=1, triplicate=2, norm="cscore", 
poscont="Control P", negcont="Control N")
datnorm3 = normplate("Main Pltae 1", dat3[["datbefore"]], dat3[["datafter"]], cmap, plate=1, triplicate=3, norm="cscore", 
poscont="Control P", negcont="Control N")

# combine 3 triplicates
datnorm = rbind(datnorm1, datnorm2, datnorm3)

# reformat result
datnorm = formatRESULT(datnorm, triplicate="Triplicate", score="score", t="Time")

# identify hits
h = hits(datraw, datnorm, qc.mainplates="Main Plate 1", qc1.val=0.225, hit.val=3)

# rank hits in disending order of mean of "after" replicate scores "ma"
head(rankhits(h))
@
\normalsize

\section{Visualization}
\texttt{highSCREEN} incorporates several capabilities for compounds and controls visualization. This capability is useful when determining threshold values for QC procedures. The user can plot the density of a particular control via the function \texttt{plotcont()}. In the following example the density of positive control OD values, the density of negative control OD values and the density of low, medium and high concentration control OD values are plotted in three separate plots. Additionally, the user can plot single plate heat maps using the function $\texttt{plotplate()}$ as shown in the next example.

\tiny
<<echo=TRUE>>=
set.seed(1234)
library(highSCREEN)
library(gplots)

nc = 24
nr = 16

# create 1st triplicate of data matrix with compounds and controls
replicate1 = matrix(abs(rnorm(nr*nc)), nr, nc)

# create control map
cmap = data.frame(X1=c(rep("Control P", floor(nr/3)), rep(c("Control low", "Control med", "Control high"), 
(floor(nr/3)+nr-3*floor(nr/3))/3), rep("Control N", floor(nr/3))), X2=c(rep("Control N", floor(nr/3)), 
rep(c("Control low", "Control med", "Control high"), (floor(nr/3)+nr-3*floor(nr/3))/3), rep("Control P", floor(nr/3))))
cmap = cmap[seq(1,nr,2),]

# create 2nd triplicate of data matrix with compounds and controls
replicate2 = matrix(abs(rnorm(nr*nc)), nr, nc)

# create 3rd triplicate of data matrix with compounds and controls
replicate3 = matrix(abs(rnorm(nr*nc)), nr, nc)

# combine all triplicates for the before data
replicates_before = list(replicate1, replicate2, replicate3)
names(replicates_before) = c("Replicate1", "Replicate2", "Replicate3")

# create 1st triplicate of data matrix with compounds and controls
replicate1 = matrix(abs(rnorm(nr*nc)), nr, nc)

# create 2nd triplicate of data matrix with compounds and controls
replicate2 = matrix(abs(rnorm(nr*nc)), nr, nc)

# create 3rd triplicate of data matrix with compounds and controls
replicate3 = matrix(abs(rnorm(nr*nc)), nr, nc)

# combine all triplicates for the after data
replicates_after = list(replicate1, replicate2, replicate3)
names(replicates_after) = c("Replicate1", "Replicate2", "Replicate3")

# extract plate 1, triplicate 1
dat11 = extractplate(replicates_before, replicates_after, plate=1, replicate=1)
# extract plate 1, triplicate 2
dat12 = extractplate(replicates_before, replicates_after, plate=1, replicate=2)
# extract plate 1, triplicate 3
dat13 = extractplate(replicates_before, replicates_after, plate=1, replicate=3)

# no normalizion (norm="raw")
res11 = normplate("Main Plate 1", dat11[["datbefore"]], dat11[["datafter"]], cmap, plate=1, triplicate=1, norm="raw")
res12 = normplate("Main Plate 1", dat12[["datbefore"]], dat12[["datafter"]], cmap, plate=1, triplicate=2, norm="raw")
res13 = normplate("Main Pltae 1", dat13[["datbefore"]], dat13[["datafter"]], cmap, plate=1, triplicate=3, norm="raw")

# combine 3 triplicates
res1 = rbind(res11, res12, res13)
# reformat result
res1 = formatRESULT(res1, triplicate="Triplicate", score="score", t="Time")

layout(matrix(c(1,2,3), 3, 1, byrow = TRUE))

# plot density of all positive controls
plotcont(subset(res1, welltype=="Control P"), main="Density of Positive Controls", xaxis.marks=seq(-1,5,0.025))

# plot density of all negative controls
plotcont(subset(res1, welltype=="Control N"), main="Density of Negative Controls", xaxis.marks=seq(-1,5,0.025))

# plot density of controls with low, medium and high concentrations
plotcont(subset(res1, welltype=="Control low" | welltype=="Control med" | welltype=="Control high"), main="Density of Controls with Low, 
Medium and High Concentrations", xaxis.marks=seq(-1,5,0.025))

# plot single plate activity levels
plotplate(res1, main="Single Plate Activity Levels")

sessionInfo()
@
\normalsize

\clearpage
\section{Acknowledgement}
This project was funded by the Division of Allergy, Immunology, and Transplantation, National Institute of Allergy and Infectious Diseases, National Institutes of Health, Department of Health and Human Services, under contract No. HHSN272201400054C entitled \textquotedblleft{Adjuvant Discovery For Vaccines Against West Nile Virus and Influenza}\textquotedblright, awarded to Duke University and lead by Drs. Herman Staats and Soman Abraham.

\nocite{*}
\bibliographystyle{plain}
\bibliography{highSCREENbibl} 

\end{document}
